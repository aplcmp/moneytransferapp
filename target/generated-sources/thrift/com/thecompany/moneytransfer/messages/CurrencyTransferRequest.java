/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thecompany.moneytransfer.messages;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-13")
public class CurrencyTransferRequest implements org.apache.thrift.TBase<CurrencyTransferRequest, CurrencyTransferRequest._Fields>, java.io.Serializable, Cloneable, Comparable<CurrencyTransferRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CurrencyTransferRequest");

  private static final org.apache.thrift.protocol.TField SOURCE_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceAccountId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TARGET_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("targetAccountId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("targetUserName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField TRANSFER_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("transferReason", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CurrencyTransferRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CurrencyTransferRequestTupleSchemeFactory());
  }

  public String sourceAccountId; // required
  public String targetAccountId; // required
  public String targetUserName; // required
  public CurrencyAmount amount; // required
  public String transferReason; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SOURCE_ACCOUNT_ID((short)1, "sourceAccountId"),
    TARGET_ACCOUNT_ID((short)2, "targetAccountId"),
    TARGET_USER_NAME((short)3, "targetUserName"),
    AMOUNT((short)4, "amount"),
    TRANSFER_REASON((short)5, "transferReason");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SOURCE_ACCOUNT_ID
          return SOURCE_ACCOUNT_ID;
        case 2: // TARGET_ACCOUNT_ID
          return TARGET_ACCOUNT_ID;
        case 3: // TARGET_USER_NAME
          return TARGET_USER_NAME;
        case 4: // AMOUNT
          return AMOUNT;
        case 5: // TRANSFER_REASON
          return TRANSFER_REASON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SOURCE_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("targetAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("targetUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CurrencyAmount.class)));
    tmpMap.put(_Fields.TRANSFER_REASON, new org.apache.thrift.meta_data.FieldMetaData("transferReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CurrencyTransferRequest.class, metaDataMap);
  }

  public CurrencyTransferRequest() {
  }

  public CurrencyTransferRequest(
    String sourceAccountId,
    String targetAccountId,
    String targetUserName,
    CurrencyAmount amount,
    String transferReason)
  {
    this();
    this.sourceAccountId = sourceAccountId;
    this.targetAccountId = targetAccountId;
    this.targetUserName = targetUserName;
    this.amount = amount;
    this.transferReason = transferReason;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CurrencyTransferRequest(CurrencyTransferRequest other) {
    if (other.isSetSourceAccountId()) {
      this.sourceAccountId = other.sourceAccountId;
    }
    if (other.isSetTargetAccountId()) {
      this.targetAccountId = other.targetAccountId;
    }
    if (other.isSetTargetUserName()) {
      this.targetUserName = other.targetUserName;
    }
    if (other.isSetAmount()) {
      this.amount = new CurrencyAmount(other.amount);
    }
    if (other.isSetTransferReason()) {
      this.transferReason = other.transferReason;
    }
  }

  public CurrencyTransferRequest deepCopy() {
    return new CurrencyTransferRequest(this);
  }

  @Override
  public void clear() {
    this.sourceAccountId = null;
    this.targetAccountId = null;
    this.targetUserName = null;
    this.amount = null;
    this.transferReason = null;
  }

  public String getSourceAccountId() {
    return this.sourceAccountId;
  }

  public CurrencyTransferRequest setSourceAccountId(String sourceAccountId) {
    this.sourceAccountId = sourceAccountId;
    return this;
  }

  public void unsetSourceAccountId() {
    this.sourceAccountId = null;
  }

  /** Returns true if field sourceAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceAccountId() {
    return this.sourceAccountId != null;
  }

  public void setSourceAccountIdIsSet(boolean value) {
    if (!value) {
      this.sourceAccountId = null;
    }
  }

  public String getTargetAccountId() {
    return this.targetAccountId;
  }

  public CurrencyTransferRequest setTargetAccountId(String targetAccountId) {
    this.targetAccountId = targetAccountId;
    return this;
  }

  public void unsetTargetAccountId() {
    this.targetAccountId = null;
  }

  /** Returns true if field targetAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetAccountId() {
    return this.targetAccountId != null;
  }

  public void setTargetAccountIdIsSet(boolean value) {
    if (!value) {
      this.targetAccountId = null;
    }
  }

  public String getTargetUserName() {
    return this.targetUserName;
  }

  public CurrencyTransferRequest setTargetUserName(String targetUserName) {
    this.targetUserName = targetUserName;
    return this;
  }

  public void unsetTargetUserName() {
    this.targetUserName = null;
  }

  /** Returns true if field targetUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetUserName() {
    return this.targetUserName != null;
  }

  public void setTargetUserNameIsSet(boolean value) {
    if (!value) {
      this.targetUserName = null;
    }
  }

  public CurrencyAmount getAmount() {
    return this.amount;
  }

  public CurrencyTransferRequest setAmount(CurrencyAmount amount) {
    this.amount = amount;
    return this;
  }

  public void unsetAmount() {
    this.amount = null;
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return this.amount != null;
  }

  public void setAmountIsSet(boolean value) {
    if (!value) {
      this.amount = null;
    }
  }

  public String getTransferReason() {
    return this.transferReason;
  }

  public CurrencyTransferRequest setTransferReason(String transferReason) {
    this.transferReason = transferReason;
    return this;
  }

  public void unsetTransferReason() {
    this.transferReason = null;
  }

  /** Returns true if field transferReason is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferReason() {
    return this.transferReason != null;
  }

  public void setTransferReasonIsSet(boolean value) {
    if (!value) {
      this.transferReason = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SOURCE_ACCOUNT_ID:
      if (value == null) {
        unsetSourceAccountId();
      } else {
        setSourceAccountId((String)value);
      }
      break;

    case TARGET_ACCOUNT_ID:
      if (value == null) {
        unsetTargetAccountId();
      } else {
        setTargetAccountId((String)value);
      }
      break;

    case TARGET_USER_NAME:
      if (value == null) {
        unsetTargetUserName();
      } else {
        setTargetUserName((String)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((CurrencyAmount)value);
      }
      break;

    case TRANSFER_REASON:
      if (value == null) {
        unsetTransferReason();
      } else {
        setTransferReason((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SOURCE_ACCOUNT_ID:
      return getSourceAccountId();

    case TARGET_ACCOUNT_ID:
      return getTargetAccountId();

    case TARGET_USER_NAME:
      return getTargetUserName();

    case AMOUNT:
      return getAmount();

    case TRANSFER_REASON:
      return getTransferReason();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SOURCE_ACCOUNT_ID:
      return isSetSourceAccountId();
    case TARGET_ACCOUNT_ID:
      return isSetTargetAccountId();
    case TARGET_USER_NAME:
      return isSetTargetUserName();
    case AMOUNT:
      return isSetAmount();
    case TRANSFER_REASON:
      return isSetTransferReason();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CurrencyTransferRequest)
      return this.equals((CurrencyTransferRequest)that);
    return false;
  }

  public boolean equals(CurrencyTransferRequest that) {
    if (that == null)
      return false;

    boolean this_present_sourceAccountId = true && this.isSetSourceAccountId();
    boolean that_present_sourceAccountId = true && that.isSetSourceAccountId();
    if (this_present_sourceAccountId || that_present_sourceAccountId) {
      if (!(this_present_sourceAccountId && that_present_sourceAccountId))
        return false;
      if (!this.sourceAccountId.equals(that.sourceAccountId))
        return false;
    }

    boolean this_present_targetAccountId = true && this.isSetTargetAccountId();
    boolean that_present_targetAccountId = true && that.isSetTargetAccountId();
    if (this_present_targetAccountId || that_present_targetAccountId) {
      if (!(this_present_targetAccountId && that_present_targetAccountId))
        return false;
      if (!this.targetAccountId.equals(that.targetAccountId))
        return false;
    }

    boolean this_present_targetUserName = true && this.isSetTargetUserName();
    boolean that_present_targetUserName = true && that.isSetTargetUserName();
    if (this_present_targetUserName || that_present_targetUserName) {
      if (!(this_present_targetUserName && that_present_targetUserName))
        return false;
      if (!this.targetUserName.equals(that.targetUserName))
        return false;
    }

    boolean this_present_amount = true && this.isSetAmount();
    boolean that_present_amount = true && that.isSetAmount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (!this.amount.equals(that.amount))
        return false;
    }

    boolean this_present_transferReason = true && this.isSetTransferReason();
    boolean that_present_transferReason = true && that.isSetTransferReason();
    if (this_present_transferReason || that_present_transferReason) {
      if (!(this_present_transferReason && that_present_transferReason))
        return false;
      if (!this.transferReason.equals(that.transferReason))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sourceAccountId = true && (isSetSourceAccountId());
    list.add(present_sourceAccountId);
    if (present_sourceAccountId)
      list.add(sourceAccountId);

    boolean present_targetAccountId = true && (isSetTargetAccountId());
    list.add(present_targetAccountId);
    if (present_targetAccountId)
      list.add(targetAccountId);

    boolean present_targetUserName = true && (isSetTargetUserName());
    list.add(present_targetUserName);
    if (present_targetUserName)
      list.add(targetUserName);

    boolean present_amount = true && (isSetAmount());
    list.add(present_amount);
    if (present_amount)
      list.add(amount);

    boolean present_transferReason = true && (isSetTransferReason());
    list.add(present_transferReason);
    if (present_transferReason)
      list.add(transferReason);

    return list.hashCode();
  }

  @Override
  public int compareTo(CurrencyTransferRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSourceAccountId()).compareTo(other.isSetSourceAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceAccountId, other.sourceAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetAccountId()).compareTo(other.isSetTargetAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetAccountId, other.targetAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetUserName()).compareTo(other.isSetTargetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetUserName, other.targetUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferReason()).compareTo(other.isSetTransferReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferReason, other.transferReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CurrencyTransferRequest(");
    boolean first = true;

    sb.append("sourceAccountId:");
    if (this.sourceAccountId == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceAccountId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetAccountId:");
    if (this.targetAccountId == null) {
      sb.append("null");
    } else {
      sb.append(this.targetAccountId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetUserName:");
    if (this.targetUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.targetUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    if (this.amount == null) {
      sb.append("null");
    } else {
      sb.append(this.amount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferReason:");
    if (this.transferReason == null) {
      sb.append("null");
    } else {
      sb.append(this.transferReason);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (amount != null) {
      amount.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CurrencyTransferRequestStandardSchemeFactory implements SchemeFactory {
    public CurrencyTransferRequestStandardScheme getScheme() {
      return new CurrencyTransferRequestStandardScheme();
    }
  }

  private static class CurrencyTransferRequestStandardScheme extends StandardScheme<CurrencyTransferRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CurrencyTransferRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SOURCE_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceAccountId = iprot.readString();
              struct.setSourceAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TARGET_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetAccountId = iprot.readString();
              struct.setTargetAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetUserName = iprot.readString();
              struct.setTargetUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.amount = new CurrencyAmount();
              struct.amount.read(iprot);
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRANSFER_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferReason = iprot.readString();
              struct.setTransferReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CurrencyTransferRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sourceAccountId != null) {
        oprot.writeFieldBegin(SOURCE_ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.sourceAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.targetAccountId != null) {
        oprot.writeFieldBegin(TARGET_ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.targetAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.targetUserName != null) {
        oprot.writeFieldBegin(TARGET_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.targetUserName);
        oprot.writeFieldEnd();
      }
      if (struct.amount != null) {
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        struct.amount.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.transferReason != null) {
        oprot.writeFieldBegin(TRANSFER_REASON_FIELD_DESC);
        oprot.writeString(struct.transferReason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CurrencyTransferRequestTupleSchemeFactory implements SchemeFactory {
    public CurrencyTransferRequestTupleScheme getScheme() {
      return new CurrencyTransferRequestTupleScheme();
    }
  }

  private static class CurrencyTransferRequestTupleScheme extends TupleScheme<CurrencyTransferRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CurrencyTransferRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSourceAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetTargetAccountId()) {
        optionals.set(1);
      }
      if (struct.isSetTargetUserName()) {
        optionals.set(2);
      }
      if (struct.isSetAmount()) {
        optionals.set(3);
      }
      if (struct.isSetTransferReason()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSourceAccountId()) {
        oprot.writeString(struct.sourceAccountId);
      }
      if (struct.isSetTargetAccountId()) {
        oprot.writeString(struct.targetAccountId);
      }
      if (struct.isSetTargetUserName()) {
        oprot.writeString(struct.targetUserName);
      }
      if (struct.isSetAmount()) {
        struct.amount.write(oprot);
      }
      if (struct.isSetTransferReason()) {
        oprot.writeString(struct.transferReason);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CurrencyTransferRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.sourceAccountId = iprot.readString();
        struct.setSourceAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.targetAccountId = iprot.readString();
        struct.setTargetAccountIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.targetUserName = iprot.readString();
        struct.setTargetUserNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.amount = new CurrencyAmount();
        struct.amount.read(iprot);
        struct.setAmountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.transferReason = iprot.readString();
        struct.setTransferReasonIsSet(true);
      }
    }
  }

}

