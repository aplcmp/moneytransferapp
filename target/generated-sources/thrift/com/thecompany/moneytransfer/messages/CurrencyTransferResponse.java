/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thecompany.moneytransfer.messages;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-13")
public class CurrencyTransferResponse implements org.apache.thrift.TBase<CurrencyTransferResponse, CurrencyTransferResponse._Fields>, java.io.Serializable, Cloneable, Comparable<CurrencyTransferResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CurrencyTransferResponse");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SOURCE_CHARGED_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceCharged", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TARGET_DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("targetDeposit", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CurrencyTransferResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CurrencyTransferResponseTupleSchemeFactory());
  }

  /**
   * 
   * @see CurrencyTransferResult
   */
  public CurrencyTransferResult status; // required
  public String description; // optional
  public CurrencyAmount sourceCharged; // required
  public CurrencyAmount targetDeposit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see CurrencyTransferResult
     */
    STATUS((short)1, "status"),
    DESCRIPTION((short)2, "description"),
    SOURCE_CHARGED((short)3, "sourceCharged"),
    TARGET_DEPOSIT((short)4, "targetDeposit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // SOURCE_CHARGED
          return SOURCE_CHARGED;
        case 4: // TARGET_DEPOSIT
          return TARGET_DEPOSIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DESCRIPTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CurrencyTransferResult.class)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_CHARGED, new org.apache.thrift.meta_data.FieldMetaData("sourceCharged", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CurrencyAmount.class)));
    tmpMap.put(_Fields.TARGET_DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("targetDeposit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CurrencyAmount.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CurrencyTransferResponse.class, metaDataMap);
  }

  public CurrencyTransferResponse() {
  }

  public CurrencyTransferResponse(
    CurrencyTransferResult status,
    CurrencyAmount sourceCharged,
    CurrencyAmount targetDeposit)
  {
    this();
    this.status = status;
    this.sourceCharged = sourceCharged;
    this.targetDeposit = targetDeposit;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CurrencyTransferResponse(CurrencyTransferResponse other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetSourceCharged()) {
      this.sourceCharged = new CurrencyAmount(other.sourceCharged);
    }
    if (other.isSetTargetDeposit()) {
      this.targetDeposit = new CurrencyAmount(other.targetDeposit);
    }
  }

  public CurrencyTransferResponse deepCopy() {
    return new CurrencyTransferResponse(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.description = null;
    this.sourceCharged = null;
    this.targetDeposit = null;
  }

  /**
   * 
   * @see CurrencyTransferResult
   */
  public CurrencyTransferResult getStatus() {
    return this.status;
  }

  /**
   * 
   * @see CurrencyTransferResult
   */
  public CurrencyTransferResponse setStatus(CurrencyTransferResult status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public CurrencyTransferResponse setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public CurrencyAmount getSourceCharged() {
    return this.sourceCharged;
  }

  public CurrencyTransferResponse setSourceCharged(CurrencyAmount sourceCharged) {
    this.sourceCharged = sourceCharged;
    return this;
  }

  public void unsetSourceCharged() {
    this.sourceCharged = null;
  }

  /** Returns true if field sourceCharged is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceCharged() {
    return this.sourceCharged != null;
  }

  public void setSourceChargedIsSet(boolean value) {
    if (!value) {
      this.sourceCharged = null;
    }
  }

  public CurrencyAmount getTargetDeposit() {
    return this.targetDeposit;
  }

  public CurrencyTransferResponse setTargetDeposit(CurrencyAmount targetDeposit) {
    this.targetDeposit = targetDeposit;
    return this;
  }

  public void unsetTargetDeposit() {
    this.targetDeposit = null;
  }

  /** Returns true if field targetDeposit is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetDeposit() {
    return this.targetDeposit != null;
  }

  public void setTargetDepositIsSet(boolean value) {
    if (!value) {
      this.targetDeposit = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((CurrencyTransferResult)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case SOURCE_CHARGED:
      if (value == null) {
        unsetSourceCharged();
      } else {
        setSourceCharged((CurrencyAmount)value);
      }
      break;

    case TARGET_DEPOSIT:
      if (value == null) {
        unsetTargetDeposit();
      } else {
        setTargetDeposit((CurrencyAmount)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case DESCRIPTION:
      return getDescription();

    case SOURCE_CHARGED:
      return getSourceCharged();

    case TARGET_DEPOSIT:
      return getTargetDeposit();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case DESCRIPTION:
      return isSetDescription();
    case SOURCE_CHARGED:
      return isSetSourceCharged();
    case TARGET_DEPOSIT:
      return isSetTargetDeposit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CurrencyTransferResponse)
      return this.equals((CurrencyTransferResponse)that);
    return false;
  }

  public boolean equals(CurrencyTransferResponse that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_sourceCharged = true && this.isSetSourceCharged();
    boolean that_present_sourceCharged = true && that.isSetSourceCharged();
    if (this_present_sourceCharged || that_present_sourceCharged) {
      if (!(this_present_sourceCharged && that_present_sourceCharged))
        return false;
      if (!this.sourceCharged.equals(that.sourceCharged))
        return false;
    }

    boolean this_present_targetDeposit = true && this.isSetTargetDeposit();
    boolean that_present_targetDeposit = true && that.isSetTargetDeposit();
    if (this_present_targetDeposit || that_present_targetDeposit) {
      if (!(this_present_targetDeposit && that_present_targetDeposit))
        return false;
      if (!this.targetDeposit.equals(that.targetDeposit))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_sourceCharged = true && (isSetSourceCharged());
    list.add(present_sourceCharged);
    if (present_sourceCharged)
      list.add(sourceCharged);

    boolean present_targetDeposit = true && (isSetTargetDeposit());
    list.add(present_targetDeposit);
    if (present_targetDeposit)
      list.add(targetDeposit);

    return list.hashCode();
  }

  @Override
  public int compareTo(CurrencyTransferResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceCharged()).compareTo(other.isSetSourceCharged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceCharged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceCharged, other.sourceCharged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetDeposit()).compareTo(other.isSetTargetDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetDeposit, other.targetDeposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CurrencyTransferResponse(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sourceCharged:");
    if (this.sourceCharged == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceCharged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetDeposit:");
    if (this.targetDeposit == null) {
      sb.append("null");
    } else {
      sb.append(this.targetDeposit);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sourceCharged != null) {
      sourceCharged.validate();
    }
    if (targetDeposit != null) {
      targetDeposit.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CurrencyTransferResponseStandardSchemeFactory implements SchemeFactory {
    public CurrencyTransferResponseStandardScheme getScheme() {
      return new CurrencyTransferResponseStandardScheme();
    }
  }

  private static class CurrencyTransferResponseStandardScheme extends StandardScheme<CurrencyTransferResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CurrencyTransferResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.thecompany.moneytransfer.messages.CurrencyTransferResult.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SOURCE_CHARGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sourceCharged = new CurrencyAmount();
              struct.sourceCharged.read(iprot);
              struct.setSourceChargedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TARGET_DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.targetDeposit = new CurrencyAmount();
              struct.targetDeposit.read(iprot);
              struct.setTargetDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CurrencyTransferResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceCharged != null) {
        oprot.writeFieldBegin(SOURCE_CHARGED_FIELD_DESC);
        struct.sourceCharged.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.targetDeposit != null) {
        oprot.writeFieldBegin(TARGET_DEPOSIT_FIELD_DESC);
        struct.targetDeposit.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CurrencyTransferResponseTupleSchemeFactory implements SchemeFactory {
    public CurrencyTransferResponseTupleScheme getScheme() {
      return new CurrencyTransferResponseTupleScheme();
    }
  }

  private static class CurrencyTransferResponseTupleScheme extends TupleScheme<CurrencyTransferResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CurrencyTransferResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetSourceCharged()) {
        optionals.set(2);
      }
      if (struct.isSetTargetDeposit()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetSourceCharged()) {
        struct.sourceCharged.write(oprot);
      }
      if (struct.isSetTargetDeposit()) {
        struct.targetDeposit.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CurrencyTransferResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.status = com.thecompany.moneytransfer.messages.CurrencyTransferResult.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sourceCharged = new CurrencyAmount();
        struct.sourceCharged.read(iprot);
        struct.setSourceChargedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.targetDeposit = new CurrencyAmount();
        struct.targetDeposit.read(iprot);
        struct.setTargetDepositIsSet(true);
      }
    }
  }

}

